# ==============================================================================
# Correct snippet indentation: https://github.com/SirVer/ultisnips/issues/983
# Just use <C-v><Tab>
# ==============================================================================
snippet todo
	console.log("📝 TODO: ${1}")
snippet import
	import $2 from "$1"
snippet fun
	function $1($3) {
		$2
	}
snippet af
	($2) => $1
snippet if
	if (${1}) {
		${2}
	}
snippet else
	else {
		${1}
	}
snippet for
	for (var ${1:i} = 0; $1 < ${2}; $1${3}) {
		${4}
	}
snippet try
	try {
		${1}
	}
snippet catch
	catch (error) {
		${1}
	}
snippet finally
	finally {
		${1}
	}
snippet switch
	switch (${1}) {
		case ${2}:
			${3}
			break;
	}
snippet default
	default:
		${1}
		break;
snippet case
	case ${1}:
		${2}
		break;
snippet int
	parseInt(${1}, 10)
snippet cl
	console.log(${1});
snippet cle
	console.log("👾", ${1});
snippet cls
	console.log('${1}');
snippet ci
	console.info(${1});
snippet ce
	console.error(${1});
snippet ct
	console.trace();
# testing ======================================================================
snippet sd
	screen.debug($1);
snippet describe
	describe('$1', () => {
		$2
	});
snippet test
	test('$1', () => {
		$2
	});
snippet it
	it('$1', () => {
		$2
	});
snippet beforeEach
	beforeEach(() => {
		$1
	});
snippet act
	act(() => {
		$1
	});
# react =======================================================================
snippet uses useState
	const [${1:state}, set${2}] = useState(${3:initialState});
snippet usee useEffect
	useEffect(() => {
		${1}
	});
snippet userd useReducer
	const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer});
snippet userf useRef
	const ${1:refContainer} = useRef(${2:initialValue});
snippet usect useContext
	const ${1:value} = useContext(${2:MyContext});
snippet usecb useCallback
	const ${1:memoizedCallback} = useCallback(
	() => {
		${2}(${3})
	},
	[$3]
	);
snippet usem useMemo
	const ${1:memoizedCallback} = useMemo(() => ${2}(${3}), [$3]);
snippet useih useImperativeHandle
	useImperativeHandle(${1:ref}, ${2:createHandle});
snippet usedv useDebugValue
	useDebugValue(${1:value});
